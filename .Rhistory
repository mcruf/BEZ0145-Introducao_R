}
# Apply IDW to each sampling method separately
idw_results <- lapply(all_samples_list, perform_idw, grid = grid) %>%
bind_rows() # Combine results into a single data frame
p3 <- ggplot(idw_results, aes(x = x, y = y, fill = z_idw)) +
geom_raster() +
scale_fill_gradientn(colors = tim.colors(100), name = "Abundância") +
facet_wrap(factor(amostragem, c("Aleatório simples", "Aleatório estratificado", "Sistemático", "Preferencial")) ~.) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, face =2))
ggsave("~/Documents/INLA_workshop/Day_03/Figures/interpolacoes.jpg", p3,
width = 15,
height = 20,
unit = "cm",
dpi = 300)
p3
ggplot(grid, aes(x = x, y = y, fill = z)) +
geom_raster(alpha = .6) +
scale_fill_gradientn(colors = tim.colors(100), name = "Abundância") +
geom_point(data = all_samples, aes(x = x, y = y, fill = NULL), color = "black", size = 2) +
theme_minimal() +
coord_equal() +
#scale_shape_manual(values = c(16, 17, 15, 3)) + # Different
facet_wrap(factor(amostragem, c("Aleatório simples", "Aleatório estratificado", "Sistemático", "Preferencial")) ~.) +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, face =2))
set.seed(123)
# Simulate a Gaussian Random Field for fish abundance (catches in weight) using ggplot
# 1. Define the spatial domain
x <- seq(0, 10, length.out = 50)
y <- seq(0, 10, length.out = 50)
grid <- expand.grid(x = x, y = y)
# 2. Define the covariance function (e.g., exponential covariance)
sigma2 <- 5 # Variance
range <- 2  # Spatial range
nu <- 0.5    # Smoothness parameter (for Matérn, but we'll use exponential)
exponential_covariance <- function(dist, sigma2, range) {
sigma2 * exp(-dist / range)
}
# 3. Calculate the distance matrix
dist_matrix <- as.matrix(dist(grid))
# 4. Calculate the covariance matrix
covariance_matrix <- exponential_covariance(dist_matrix, sigma2, range)
# 5. Simulate the Gaussian Random Field
library(MASS)
z <- mvrnorm(n = 1, mu = rep(0, nrow(grid)), Sigma = covariance_matrix)
# 6. Reshape the simulated field into a data frame for ggplot
grid$z <- as.vector(z)
n_samples <- 50 #
# 8.1. Simple Random Sampling
set.seed(123)
random_indices <- sample(nrow(grid), n_samples)
simple_random_samples <- grid[random_indices, c("x", "y", "z")]
simple_random_samples$amostragem <- "Aleatório simples"
# 8.2 Stratified Random Sampling (stratify by spatial grid)
grid$x_strat <- cut(grid$x, breaks = 4) # Divide x into 4 strata
grid$y_strat <- cut(grid$y, breaks = 4) # Divide y into 4 strata
grid$spatial_strat <- paste(grid$x_strat, grid$y_strat) # Combine x and y strata
stratified_samples <- do.call(rbind, lapply(split(grid, grid$spatial_strat), function(strat) {
num_samples_strat <- ceiling(n_samples / 16) # 16 strata
if (nrow(strat) > num_samples_strat) {
strat[sample(nrow(strat), num_samples_strat), c("x", "y", "z")] # Select relevant columns
} else {
strat[sample(nrow(strat), nrow(strat)), c("x", "y", "z")] # Select relevant columns
}
}))
stratified_samples$amostragem <- "Aleatório estratificado"
# 8.3 Systematic Sampling (using a grid pattern)
side_samples <- ceiling(sqrt(n_samples)) # samples per side of the grid
x_seq <- seq(min(grid$x), max(grid$x), length.out = side_samples)
y_seq <- seq(min(grid$y), max(grid$y), length.out = side_samples)
systematic_samples_grid <- expand.grid(x = x_seq, y = y_seq)
## find the closest grid points
systematic_samples <- apply(systematic_samples_grid, 1, function(point){
distances <- sqrt((grid$x - point["x"])^2 + (grid$y - point["y"])^2)
return(grid[which.min(distances), c("x", "y", "z")])
})
systematic_samples <- do.call(rbind, systematic_samples)
systematic_samples$amostragem <- "Sistemático"
# 8.4 Preferential Sampling (sampling where abundance is high)
preferential_samples <- grid[order(as.numeric(grid$z), decreasing = TRUE)[1:n_samples], c("x", "y", "z")] # Select relevant columns
preferential_samples$amostragem <- "Preferencial"
# Combine all sampling results
all_samples <- rbind(simple_random_samples, stratified_samples, systematic_samples, preferential_samples)
AAS <- subset(all_samples, amostragem == "Aleatório simples")
p1 <- ggplot(grid, aes(x = x, y = y, fill = z)) +
geom_raster() +
geom_point(data = AAS[c(10,34,22,50,44,13,1),], aes(x = x, y = y, fill = NULL), color = "black", size = 3) +
annotate("text", x=8.5, y=9, label= "D", size = 9, fontface =2) +
annotate("text", x=AAS[10,"x"], y=AAS[10,"y"]-0.5, label= "Y(s1)", size = 5, fontface =2) +
annotate("text", x=AAS[50,"x"], y=AAS[50,"y"]-0.5, label= "Y(s2)", size = 5, fontface =2) +
annotate("text", x=AAS[44,"x"], y=AAS[44,"y"]+0.5, label= "Y(s3)", size = 5, fontface =2) +
#scale_fill_viridis()+
scale_fill_gradientn(colors = tim.colors(100), name = "Abundância") +
#geom_contour(aes(z = z), color = "black", alpha = 0.5) +
labs(title = "Campo aleatório (e.g., mapa de abundância)") +
theme_minimal() +
coord_equal() + # Ensure equal aspect ratio
theme(plot.title = element_text(hjust = 0.5))
p1
p2<-ggplot(grid, aes(x = x, y = y, fill = z)) +
geom_raster(alpha = .6) +
scale_fill_gradientn(colors = tim.colors(100), name = "Abundância") +
geom_point(data = all_samples, aes(x = x, y = y, fill = NULL), color = "black", size = 2) +
theme_minimal() +
coord_equal() +
#scale_shape_manual(values = c(16, 17, 15, 3)) + # Different
facet_wrap(factor(amostragem, c("Aleatório simples", "Aleatório estratificado", "Sistemático", "Preferencial")) ~.) +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, face =2))
p2
#ggsave("~/Documents/INLA_workshop/Day_03/Figures/amostragens.jpg", p2, dpi = 300)
ggsave("~/Documents/INLA_workshop/Day_03/Figures/amostragens.jpg", p2,
width = 15,
height = 20,
unit = "cm",
dpi = 300)
### Simple IDW interpolation to see impact of sampling
# Convert all_samples to SpatialPointsDataFrame
grid2 <- grid
coordinates(grid2) <- ~x + y
# Convert 'all_samples' into a spatial object correctly
all_samples_list <- split(all_samples, all_samples$amostragem) # Split by sampling type
perform_idw <- function(samples_df, grid2) {
# Ensure the data frame has spatial coordinates
coordinates(samples_df) <- ~x + y
# Create the IDW model
idw_model <- gstat::idw(formula = z ~ 1, locations = samples_df, newdata = grid2, idp = 2.0)
# Return a data frame with interpolated values
return(data.frame(grid, z_idw = idw_model$var1.pred, amostragem = unique(samples_df$amostragem)))
}
# Apply IDW to each sampling method separately
idw_results <- lapply(all_samples_list, perform_idw, grid = grid2) %>%
bind_rows() # Combine results into a single data frame
p3 <- ggplot(idw_results, aes(x = x, y = y, fill = z_idw)) +
geom_raster() +
scale_fill_gradientn(colors = tim.colors(100), name = "Abundância") +
facet_wrap(factor(amostragem, c("Aleatório simples", "Aleatório estratificado", "Sistemático", "Preferencial")) ~.) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, face =2))
p3
p3 <- ggplot(idw_results, aes(x = x, y = y, fill = z_idw)) +
geom_raster() +
scale_fill_gradientn(colors = tim.colors(100), name = "Abundância") +
facet_wrap(factor(amostragem, c("Aleatório simples", "Aleatório estratificado", "Sistemático", "Preferencial")) ~.) +
theme_minimal() +
coord_equal() +
#scale_shape_manual(values = c(16, 17, 15, 3)) + # Different
facet_wrap(factor(amostragem, c("Aleatório simples", "Aleatório estratificado", "Sistemático", "Preferencial")) ~.) +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, face =2))
p3
ggsave("~/Documents/INLA_workshop/Day_03/Figures/interpolacoes.jpg", p3,
width = 15,
height = 20,
unit = "cm",
dpi = 300)
test <- read_sf("~/Downloads/GMW_v3_2020/gmw_v3_2020_vec.shp")
test <- sf::read_sf("~/Downloads/GMW_v3_2020/gmw_v3_2020_vec.shp")
head(test)
test
library(readr)
Data_RV <- read_delim("Library/CloudStorage/OneDrive-Personal/Arbeit/Collaborations/Raiane_Vital/Dados/Data_RV.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Data_RV)
head(Data_RV)
head(as.data.frame(Data_RV))
length(unique(Data_RV$Species))
df <- read_delim("Library/CloudStorage/OneDrive-Personal/Arbeit/Collaborations/Raiane_Vital/Dados/Variable_RV.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
head(df)
head(as.data.frame(Data_RV))
head(df)
head(df)
View(df)
View(RD)
View(RD)
View(Data_RV)
Data_RV %>% filter(Point == "ARE_07")
library(plyr)
Data_RV %>% filter(Point == "ARE_07")
library(dplyr)
Data_RV %>% filter(Point == "ARE_07")
table(Data_RV$Year)
test<-Data_RV %>% filter(Point == "ARE_07")
table(test$Month)
table(test$Data)
library(xaringan)
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
inf_mr()
if(as.integer(parts[2]) == 6){ #Someitmes time appears as 1,6 or 19,6. The decimal '6' implies in 30 min, thus 1:30, 19:30
minute <- 30
} else{
minute <- as.integer(parts[2]) * (ifelse(nchar(parts[2]) == 1, 10, 1))
}
library(dplyr) #manipulação dos dados
library(tidyr) #manipulação dos dados
#install.packages("tidyr")
setwd("~/OneDrive/Arbeit/Lectures_and_Talks/UFRN/Lectures/BEZ0145-Introducao_R/")
dados <- read.csv("palmerpenguins.csv")
## Histograma padrão
hist(dados$body_mass_g) #Frequência absoluta
## Visualizando a distribuição da variável de interesse
boxplot(dados$body_mass_g)
## Comparando a variável de interesse com diferentes grupos
boxplot(dados$body_mass_g ~ dados$species)
## Calculando a média de peso de cada espécie de pinguim
tmp <- dados %>%
group_by(species) %>% #agrupando por especie
summarize(Peso_medio = mean(body_mass_g)) %>% #calculando a media dentro de cada grupo (mean)
pivot_wider(names_from = species,
values_from = Peso_medio) %>% #transformando o dado do formato longo (long) para largo (wide)
as.matrix() #Transformando para matrix
barplot(tmp)
pie(tmp,
labels = colnames(tmp))
tmp <- dados %>%
filter(species == "Adelie") %>% #filtrando para a espécie desejada
group_by(year) %>% #agrupando os dados por ano
summarize(Peso_medio = mean(body_mass_g)) #calculando as médias anuais
plot(tmp$Peso_medio ~ tmp$year,
type = "b") #outras opções: l, o, s,...
tmp <- dados %>%
group_by(year, species) %>% #agrupando os dados por ano
summarize(Peso_medio = mean(body_mass_g)) #calculando as médias anuais por espécie
### Vamos começar a plotar....
#### Filtrando os dados por espécies
adelie <- filter(tmp, species == "Adelie")
chinstrap <- filter(tmp, species == "Chinstrap")
gentoo <- filter(tmp, species == "Gentoo")
#### Criando o gráfico base
plot(NA, xlim = range(tmp$year), ylim = range(tmp$Peso_medio))
#### Adicionando as tendências individuais
lines(adelie$year, adelie$Peso_medio,
type = "b",
col = 'cyan4')
lines(chinstrap$year, chinstrap$Peso_medio,
type = "b",
col = 'darkorange')
lines(gentoo$year, gentoo$Peso_medio,
type = "b",
col = 'gray40')
#### Podemos otimizar a sequência anterior conforme
## criando um vetor com as espécies
lista_especies <- unique(tmp$species)
## criando um vetor com as cores desejadas
cores <- c("cyan4", "darkorange", "gray40")
#### Criando o gráfico base
plot(NA, xlim = range(tmp$year), ylim = range(tmp$Peso_medio))
### Adicionando as tendências individuais de forma automatizada
for(i in seq_along(lista_especies)){
print(lista_especies[i])
spp <- filter(tmp, species == lista_especies[i]) #filtrando por espécie
lines(spp$year, spp$Peso_medio, #adicionando as linhas individuais
col = cores[i],
type = "b")
}
# Qual a relação entre a massa corporal e o tamanho do bico dos pinguins?
plot(dados$body_mass_g ~ dados$bill_length_mm)
cor(dados$body_mass_g, dados$bill_length_mm)
?pch
plot(dados$body_mass_g ~ dados$bill_length_mm,
pch = 19) # modificando o tipo de ponto; digite ?pch
plot(dados$body_mass_g ~ dados$bill_length_mm,
pch = 7) # modificando o tipo de ponto; digite ?pch
?plot
## Modificando a legenda dos eixos
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)")
## Adicionando um título
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento")
## Rotacionando os eixos
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1) #1,2,3
## Modificando as bordas
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l") #o,n,u,l,c,7
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19)
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
#pch =  15:17,
#col = as.factor(dados$species)
col = alpha(0.3))
library(scales)
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
#pch =  15:17,
#col = as.factor(dados$species)
col = alpha(0.3))
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
#pch =  15:17,
col = as.factor(dados$species))
COLORS <- c("darkorange", "cyan4", "gray60")
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
#pch =  15:17,
#col = as.factor(dados$species))
col = alpha(COLORS,0.3))
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
#pch =  15:17,
col = COLORS)
?legend
lista_especies
## Adicionando uma legenda
legend("bottomright",
legend = lista_especies,
col = CORES,
pch = 19,
bty = "n")
## Adicionando uma legenda
legend("bottomright",
legend = lista_especies,
col = COLORS,
pch = 19,
bty = "n")
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
#pch =  15:17,
#col = COLORS,
col = alpha(COLORS,0.3))
## Adicionando uma legenda
legend("bottomright",
legend = lista_especies,
col = COLORS,
pch = 19,
bty = "n")
## Adicionando uma linha de tendência média
abline(lm(dados$body_mass_g~dados$bill_length_mm),
col = 'black',
lwd = 4)
## salvando a figura
jpeg("~/Downloads/meu_grafico.jpg", #png,pdf
res = 300, #definindo a resolução
units = "in", #unidade da dimensão
width = 6, #largura do grafico
height = 5) #altura do grafico
## salvando a figura
jpeg("~/Downloads/meu_grafico2.jpg", #png,pdf
res = 300, #definindo a resolução
units = "in", #unidade da dimensão
width = 6, #largura do grafico
height = 5) #altura do grafico
jpeg("~/Downloads/meu_grafico2.jpg", #png,pdf
res = 300, #definindo a resolução
units = "in", #unidade da dimensão
width = 6, #largura do grafico
height = 5) #altura do grafico
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
col = alpha(COLORS, 0.3))
legend("bottomright",
legend = lista_especies,
col = COLORS,
pch = 19,
bty = "n")
abline(lm(dados$body_mass_g~dados$bill_length_mm),
col = 'black',
lwd = 4)
dev.off()
jpeg("~/Downloads/meu_grafico2.jpg", #png,pdf
res = 300, #definindo a resolução
units = "in", #unidade da dimensão
width = 8, #largura do grafico
height = 5) #altura do grafico
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
bty = "l",
cex = 1.5,
pch = 19,
col = alpha(COLORS, 0.3))
legend("bottomright",
legend = lista_especies,
col = COLORS,
pch = 19,
bty = "n")
abline(lm(dados$body_mass_g~dados$bill_length_mm),
col = 'black',
lwd = 4)
dev.off()
jpeg("~/Downloads/meu_grafico.jpg", #png,pdf
res = 300,
units = "in",
width = 10,
height = 4)
par(mfrow = c(1,3))
#### barplot ####
tmp2 <- tapply(dados$body_mass_g, dados$species, mean) #Usando função base
barplot(tmp2,
col = cores,
border = 'black',
width = 0.7,
ylab = "Massa corporal (g)",
main = "Massa corporal média por espécie",
las = 1)
#### boxplot ####
boxplot(dados$body_mass_g ~ dados$species,
col = cores,
lwd = 1.5,
xlab = "",
ylab = "Massa corporal (g)",
main = "Variação de massa corporal por espécie",
las = 1)
#### gráfico de dispersão ####
plot(dados$body_mass_g ~ dados$bill_length_mm,
xlab = "Comprimento do bico (mm)",
ylab = "Massa corporal (g)",
main = "Relação peso-comprimento",
las = 1,
cex = 1.5,
pch = 19,
col = alpha(cores, 0.3))
legend("bottomright",
legend = lista_especies,
col = cores,
pch = 19,
bty = "n")
abline(lm(dados$body_mass_g~dados$bill_length_mm),
col = 'black',
lwd = 4)
dev.off()
